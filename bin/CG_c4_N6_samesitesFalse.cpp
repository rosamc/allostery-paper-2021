
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/eigen.h>
#include <Eigen/Core>
#include <Eigen/Eigenvalues>
#include <vector>
#include <unsupported/Eigen/Polynomials>
#include <cmath>
#include <stdlib.h>
#include <iostream>
#include "posstpfunc_cpp_longdouble.h"

using namespace std;
using namespace Eigen;
namespace py=pybind11;

void GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, vector<long double> &num, vector<long double> &den){
    typedef long double T;

    auto parsarbuf=parsar.request();
    double *pars=(double *) parsarbuf.ptr;
    T K_1_1=pars[0];
    T K_1_2=pars[1];
    T K_1_3=pars[2];
    T K_1_4=pars[3];
    T K_1_5=pars[4];
    T K_1_6=pars[5];
    T K_2_1=pars[6];
    T K_2_2=pars[7];
    T K_2_3=pars[8];
    T K_2_4=pars[9];
    T K_2_5=pars[10];
    T K_2_6=pars[11];
    T K_3_1=pars[12];
    T K_3_2=pars[13];
    T K_3_3=pars[14];
    T K_3_4=pars[15];
    T K_3_5=pars[16];
    T K_3_6=pars[17];
    T K_4_1=pars[18];
    T K_4_2=pars[19];
    T K_4_3=pars[20];
    T K_4_4=pars[21];
    T K_4_5=pars[22];
    T K_4_6=pars[23];
    T l2=pars[24];
    T l3=pars[25];
    T l4=pars[26];
    T K1=(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4)/(1+l2+l3+l4);
    T K2=(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4)/(1+l2+l3+l4);
    T K3=(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)/(1+l2+l3+l4);
    T K4=(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)/(1+l2+l3+l4);
    T K5=(K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)/(1+l2+l3+l4);
    T K6=(K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)/(1+l2+l3+l4);

    T w12=((K_1_1*K_1_2+K_2_1*K_2_2*l2+K_3_1*K_3_2*l3+K_4_1*K_4_2*l4)*(1+l2+l3+l4))/((K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w13=((K_1_1*K_1_3+K_2_1*K_2_3*l2+K_3_1*K_3_3*l3+K_4_1*K_4_3*l4)*(1+l2+l3+l4))/((K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w14=((K_1_1*K_1_4+K_2_1*K_2_4*l2+K_3_1*K_3_4*l3+K_4_1*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w15=((K_1_1*K_1_5+K_2_1*K_2_5*l2+K_3_1*K_3_5*l3+K_4_1*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w16=((K_1_1*K_1_6+K_2_1*K_2_6*l2+K_3_1*K_3_6*l3+K_4_1*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w123=((K_1_1*K_1_2*K_1_3+K_2_1*K_2_2*K_2_3*l2+K_3_1*K_3_2*K_3_3*l3+K_4_1*K_4_2*K_4_3*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3+K_2_2*K_2_3*l2+K_3_2*K_3_3*l3+K_4_2*K_4_3*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w124=((K_1_1*K_1_2*K_1_4+K_2_1*K_2_2*K_2_4*l2+K_3_1*K_3_2*K_3_4*l3+K_4_1*K_4_2*K_4_4*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4+K_2_2*K_2_4*l2+K_3_2*K_3_4*l3+K_4_2*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w125=((K_1_1*K_1_2*K_1_5+K_2_1*K_2_2*K_2_5*l2+K_3_1*K_3_2*K_3_5*l3+K_4_1*K_4_2*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_5+K_2_2*K_2_5*l2+K_3_2*K_3_5*l3+K_4_2*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w126=((K_1_1*K_1_2*K_1_6+K_2_1*K_2_2*K_2_6*l2+K_3_1*K_3_2*K_3_6*l3+K_4_1*K_4_2*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_6+K_2_2*K_2_6*l2+K_3_2*K_3_6*l3+K_4_2*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w134=((K_1_1*K_1_3*K_1_4+K_2_1*K_2_3*K_2_4*l2+K_3_1*K_3_3*K_3_4*l3+K_4_1*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w135=((K_1_1*K_1_3*K_1_5+K_2_1*K_2_3*K_2_5*l2+K_3_1*K_3_3*K_3_5*l3+K_4_1*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w136=((K_1_1*K_1_3*K_1_6+K_2_1*K_2_3*K_2_6*l2+K_3_1*K_3_3*K_3_6*l3+K_4_1*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w145=((K_1_1*K_1_4*K_1_5+K_2_1*K_2_4*K_2_5*l2+K_3_1*K_3_4*K_3_5*l3+K_4_1*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w146=((K_1_1*K_1_4*K_1_6+K_2_1*K_2_4*K_2_6*l2+K_3_1*K_3_4*K_3_6*l3+K_4_1*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w156=((K_1_1*K_1_5*K_1_6+K_2_1*K_2_5*K_2_6*l2+K_3_1*K_3_5*K_3_6*l3+K_4_1*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1234=((K_1_1*K_1_2*K_1_3*K_1_4+K_2_1*K_2_2*K_2_3*K_2_4*l2+K_3_1*K_3_2*K_3_3*K_3_4*l3+K_4_1*K_4_2*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4+K_2_2*K_2_3*K_2_4*l2+K_3_2*K_3_3*K_3_4*l3+K_4_2*K_4_3*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1235=((K_1_1*K_1_2*K_1_3*K_1_5+K_2_1*K_2_2*K_2_3*K_2_5*l2+K_3_1*K_3_2*K_3_3*K_3_5*l3+K_4_1*K_4_2*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_5+K_2_2*K_2_3*K_2_5*l2+K_3_2*K_3_3*K_3_5*l3+K_4_2*K_4_3*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1236=((K_1_1*K_1_2*K_1_3*K_1_6+K_2_1*K_2_2*K_2_3*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_6+K_2_2*K_2_3*K_2_6*l2+K_3_2*K_3_3*K_3_6*l3+K_4_2*K_4_3*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1245=((K_1_1*K_1_2*K_1_4*K_1_5+K_2_1*K_2_2*K_2_4*K_2_5*l2+K_3_1*K_3_2*K_3_4*K_3_5*l3+K_4_1*K_4_2*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_5+K_2_2*K_2_4*K_2_5*l2+K_3_2*K_3_4*K_3_5*l3+K_4_2*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1246=((K_1_1*K_1_2*K_1_4*K_1_6+K_2_1*K_2_2*K_2_4*K_2_6*l2+K_3_1*K_3_2*K_3_4*K_3_6*l3+K_4_1*K_4_2*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_6+K_2_2*K_2_4*K_2_6*l2+K_3_2*K_3_4*K_3_6*l3+K_4_2*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1256=((K_1_1*K_1_2*K_1_5*K_1_6+K_2_1*K_2_2*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_5*K_1_6+K_2_2*K_2_5*K_2_6*l2+K_3_2*K_3_5*K_3_6*l3+K_4_2*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1345=((K_1_1*K_1_3*K_1_4*K_1_5+K_2_1*K_2_3*K_2_4*K_2_5*l2+K_3_1*K_3_3*K_3_4*K_3_5*l3+K_4_1*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1346=((K_1_1*K_1_3*K_1_4*K_1_6+K_2_1*K_2_3*K_2_4*K_2_6*l2+K_3_1*K_3_3*K_3_4*K_3_6*l3+K_4_1*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1356=((K_1_1*K_1_3*K_1_5*K_1_6+K_2_1*K_2_3*K_2_5*K_2_6*l2+K_3_1*K_3_3*K_3_5*K_3_6*l3+K_4_1*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1456=((K_1_1*K_1_4*K_1_5*K_1_6+K_2_1*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12345=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_5+K_2_1*K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_5+K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_2*K_4_3*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12346=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_6+K_2_1*K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_6+K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12356=((K_1_1*K_1_2*K_1_3*K_1_5*K_1_6+K_2_1*K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_5*K_1_6+K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12456=((K_1_1*K_1_2*K_1_4*K_1_5*K_1_6+K_2_1*K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_5*K_1_6+K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w13456=((K_1_1*K_1_3*K_1_4*K_1_5*K_1_6+K_2_1*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w123456=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_1*K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w23=((K_1_2*K_1_3+K_2_2*K_2_3*l2+K_3_2*K_3_3*l3+K_4_2*K_4_3*l4)*(1+l2+l3+l4))/((K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w24=((K_1_2*K_1_4+K_2_2*K_2_4*l2+K_3_2*K_3_4*l3+K_4_2*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w25=((K_1_2*K_1_5+K_2_2*K_2_5*l2+K_3_2*K_3_5*l3+K_4_2*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w26=((K_1_2*K_1_6+K_2_2*K_2_6*l2+K_3_2*K_3_6*l3+K_4_2*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w234=((K_1_2*K_1_3*K_1_4+K_2_2*K_2_3*K_2_4*l2+K_3_2*K_3_3*K_3_4*l3+K_4_2*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w235=((K_1_2*K_1_3*K_1_5+K_2_2*K_2_3*K_2_5*l2+K_3_2*K_3_3*K_3_5*l3+K_4_2*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w236=((K_1_2*K_1_3*K_1_6+K_2_2*K_2_3*K_2_6*l2+K_3_2*K_3_3*K_3_6*l3+K_4_2*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w245=((K_1_2*K_1_4*K_1_5+K_2_2*K_2_4*K_2_5*l2+K_3_2*K_3_4*K_3_5*l3+K_4_2*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w246=((K_1_2*K_1_4*K_1_6+K_2_2*K_2_4*K_2_6*l2+K_3_2*K_3_4*K_3_6*l3+K_4_2*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w256=((K_1_2*K_1_5*K_1_6+K_2_2*K_2_5*K_2_6*l2+K_3_2*K_3_5*K_3_6*l3+K_4_2*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2345=((K_1_2*K_1_3*K_1_4*K_1_5+K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_2*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2346=((K_1_2*K_1_3*K_1_4*K_1_6+K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2356=((K_1_2*K_1_3*K_1_5*K_1_6+K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2456=((K_1_2*K_1_4*K_1_5*K_1_6+K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w23456=((K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w34=((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w35=((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w36=((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w345=((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w346=((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w356=((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w3456=((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w45=((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w46=((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w456=((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w56=((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4));

    vector<T> coeffs_1={1};
    vector<T> coeffs_2={0, K1};
    vector<T> coeffs_3={0, K2};
    vector<T> coeffs_4={0, K3};
    vector<T> coeffs_5={0, K4};
    vector<T> coeffs_6={0, K5};
    vector<T> coeffs_7={0, K6};
    vector<T> coeffs_8={0, 0, K1*K2*w12};
    vector<T> coeffs_9={0, 0, K1*K3*w13};
    vector<T> coeffs_10={0, 0, K1*K4*w14};
    vector<T> coeffs_11={0, 0, K1*K5*w15};
    vector<T> coeffs_12={0, 0, K1*K6*w16};
    vector<T> coeffs_13={0, 0, K2*K3*w23};
    vector<T> coeffs_14={0, 0, K2*K4*w24};
    vector<T> coeffs_15={0, 0, K2*K5*w25};
    vector<T> coeffs_16={0, 0, K2*K6*w26};
    vector<T> coeffs_17={0, 0, K3*K4*w34};
    vector<T> coeffs_18={0, 0, K3*K5*w35};
    vector<T> coeffs_19={0, 0, K3*K6*w36};
    vector<T> coeffs_20={0, 0, K4*K5*w45};
    vector<T> coeffs_21={0, 0, K4*K6*w46};
    vector<T> coeffs_22={0, 0, K5*K6*w56};
    vector<T> coeffs_23={0, 0, 0, K1*K2*K3*w123*w23};
    vector<T> coeffs_24={0, 0, 0, K1*K2*K4*w124*w24};
    vector<T> coeffs_25={0, 0, 0, K1*K2*K5*w125*w25};
    vector<T> coeffs_26={0, 0, 0, K1*K2*K6*w126*w26};
    vector<T> coeffs_27={0, 0, 0, K1*K3*K4*w134*w34};
    vector<T> coeffs_28={0, 0, 0, K1*K3*K5*w135*w35};
    vector<T> coeffs_29={0, 0, 0, K1*K3*K6*w136*w36};
    vector<T> coeffs_30={0, 0, 0, K1*K4*K5*w145*w45};
    vector<T> coeffs_31={0, 0, 0, K1*K4*K6*w146*w46};
    vector<T> coeffs_32={0, 0, 0, K1*K5*K6*w156*w56};
    vector<T> coeffs_33={0, 0, 0, K2*K3*K4*w234*w34};
    vector<T> coeffs_34={0, 0, 0, K2*K3*K5*w235*w35};
    vector<T> coeffs_35={0, 0, 0, K2*K3*K6*w236*w36};
    vector<T> coeffs_36={0, 0, 0, K2*K4*K5*w245*w45};
    vector<T> coeffs_37={0, 0, 0, K2*K4*K6*w246*w46};
    vector<T> coeffs_38={0, 0, 0, K2*K5*K6*w256*w56};
    vector<T> coeffs_39={0, 0, 0, K3*K4*K5*w345*w45};
    vector<T> coeffs_40={0, 0, 0, K3*K4*K6*w346*w46};
    vector<T> coeffs_41={0, 0, 0, K3*K5*K6*w356*w56};
    vector<T> coeffs_42={0, 0, 0, K4*K5*K6*w456*w56};
    vector<T> coeffs_43={0, 0, 0, 0, K1*K2*K3*K4*w1234*w234*w34};
    vector<T> coeffs_44={0, 0, 0, 0, K1*K2*K3*K5*w1235*w235*w35};
    vector<T> coeffs_45={0, 0, 0, 0, K1*K2*K3*K6*w1236*w236*w36};
    vector<T> coeffs_46={0, 0, 0, 0, K1*K2*K4*K5*w1245*w245*w45};
    vector<T> coeffs_47={0, 0, 0, 0, K1*K2*K4*K6*w1246*w246*w46};
    vector<T> coeffs_48={0, 0, 0, 0, K1*K2*K5*K6*w1256*w256*w56};
    vector<T> coeffs_49={0, 0, 0, 0, K1*K3*K4*K5*w1345*w345*w45};
    vector<T> coeffs_50={0, 0, 0, 0, K1*K3*K4*K6*w1346*w346*w46};
    vector<T> coeffs_51={0, 0, 0, 0, K1*K3*K5*K6*w1356*w356*w56};
    vector<T> coeffs_52={0, 0, 0, 0, K1*K4*K5*K6*w1456*w456*w56};
    vector<T> coeffs_53={0, 0, 0, 0, K2*K3*K4*K5*w2345*w345*w45};
    vector<T> coeffs_54={0, 0, 0, 0, K2*K3*K4*K6*w2346*w346*w46};
    vector<T> coeffs_55={0, 0, 0, 0, K2*K3*K5*K6*w2356*w356*w56};
    vector<T> coeffs_56={0, 0, 0, 0, K2*K4*K5*K6*w2456*w456*w56};
    vector<T> coeffs_57={0, 0, 0, 0, K3*K4*K5*K6*w3456*w456*w56};
    vector<T> coeffs_58={0, 0, 0, 0, 0, K1*K2*K3*K4*K5*w12345*w2345*w345*w45};
    vector<T> coeffs_59={0, 0, 0, 0, 0, K1*K2*K3*K4*K6*w12346*w2346*w346*w46};
    vector<T> coeffs_60={0, 0, 0, 0, 0, K1*K2*K3*K5*K6*w12356*w2356*w356*w56};
    vector<T> coeffs_61={0, 0, 0, 0, 0, K1*K2*K4*K5*K6*w12456*w2456*w456*w56};
    vector<T> coeffs_62={0, 0, 0, 0, 0, K1*K3*K4*K5*K6*w13456*w3456*w456*w56};
    vector<T> coeffs_63={0, 0, 0, 0, 0, K2*K3*K4*K5*K6*w23456*w3456*w456*w56};
    vector<T> coeffs_64={0, 0, 0, 0, 0, 0, K1*K2*K3*K4*K5*K6*w123456*w23456*w3456*w456*w56};
    T numdeg0=0;
    T numdeg1=(1.0/6)*coeffs_2[1]+(1.0/6)*coeffs_3[1]+(1.0/6)*coeffs_4[1]+(1.0/6)*coeffs_5[1]+(1.0/6)*coeffs_6[1]+(1.0/6)*coeffs_7[1];
    T numdeg2=(2.0/6)*coeffs_8[2]+(2.0/6)*coeffs_9[2]+(2.0/6)*coeffs_10[2]+(2.0/6)*coeffs_11[2]+(2.0/6)*coeffs_12[2]+(2.0/6)*coeffs_13[2]+(2.0/6)*coeffs_14[2]+(2.0/6)*coeffs_15[2]+(2.0/6)*coeffs_16[2]+(2.0/6)*coeffs_17[2]+(2.0/6)*coeffs_18[2]+(2.0/6)*coeffs_19[2]+(2.0/6)*coeffs_20[2]+(2.0/6)*coeffs_21[2]+(2.0/6)*coeffs_22[2];
    T numdeg3=(3.0/6)*coeffs_23[3]+(3.0/6)*coeffs_24[3]+(3.0/6)*coeffs_25[3]+(3.0/6)*coeffs_26[3]+(3.0/6)*coeffs_27[3]+(3.0/6)*coeffs_28[3]+(3.0/6)*coeffs_29[3]+(3.0/6)*coeffs_30[3]+(3.0/6)*coeffs_31[3]+(3.0/6)*coeffs_32[3]+(3.0/6)*coeffs_33[3]+(3.0/6)*coeffs_34[3]+(3.0/6)*coeffs_35[3]+(3.0/6)*coeffs_36[3]+(3.0/6)*coeffs_37[3]+(3.0/6)*coeffs_38[3]+(3.0/6)*coeffs_39[3]+(3.0/6)*coeffs_40[3]+(3.0/6)*coeffs_41[3]+(3.0/6)*coeffs_42[3];
    T numdeg4=(4.0/6)*coeffs_43[4]+(4.0/6)*coeffs_44[4]+(4.0/6)*coeffs_45[4]+(4.0/6)*coeffs_46[4]+(4.0/6)*coeffs_47[4]+(4.0/6)*coeffs_48[4]+(4.0/6)*coeffs_49[4]+(4.0/6)*coeffs_50[4]+(4.0/6)*coeffs_51[4]+(4.0/6)*coeffs_52[4]+(4.0/6)*coeffs_53[4]+(4.0/6)*coeffs_54[4]+(4.0/6)*coeffs_55[4]+(4.0/6)*coeffs_56[4]+(4.0/6)*coeffs_57[4];
    T numdeg5=(5.0/6)*coeffs_58[5]+(5.0/6)*coeffs_59[5]+(5.0/6)*coeffs_60[5]+(5.0/6)*coeffs_61[5]+(5.0/6)*coeffs_62[5]+(5.0/6)*coeffs_63[5];
    T numdeg6=(6.0/6)*coeffs_64[6];
    T dendeg0=coeffs_1[0];
    T dendeg1=coeffs_2[1]+coeffs_3[1]+coeffs_4[1]+coeffs_5[1]+coeffs_6[1]+coeffs_7[1];
    T dendeg2=coeffs_8[2]+coeffs_9[2]+coeffs_10[2]+coeffs_11[2]+coeffs_12[2]+coeffs_13[2]+coeffs_14[2]+coeffs_15[2]+coeffs_16[2]+coeffs_17[2]+coeffs_18[2]+coeffs_19[2]+coeffs_20[2]+coeffs_21[2]+coeffs_22[2];
    T dendeg3=coeffs_23[3]+coeffs_24[3]+coeffs_25[3]+coeffs_26[3]+coeffs_27[3]+coeffs_28[3]+coeffs_29[3]+coeffs_30[3]+coeffs_31[3]+coeffs_32[3]+coeffs_33[3]+coeffs_34[3]+coeffs_35[3]+coeffs_36[3]+coeffs_37[3]+coeffs_38[3]+coeffs_39[3]+coeffs_40[3]+coeffs_41[3]+coeffs_42[3];
    T dendeg4=coeffs_43[4]+coeffs_44[4]+coeffs_45[4]+coeffs_46[4]+coeffs_47[4]+coeffs_48[4]+coeffs_49[4]+coeffs_50[4]+coeffs_51[4]+coeffs_52[4]+coeffs_53[4]+coeffs_54[4]+coeffs_55[4]+coeffs_56[4]+coeffs_57[4];
    T dendeg5=coeffs_58[5]+coeffs_59[5]+coeffs_60[5]+coeffs_61[5]+coeffs_62[5]+coeffs_63[5];
    T dendeg6=coeffs_64[6];
    num={numdeg0,numdeg1,numdeg2,numdeg3,numdeg4,numdeg5,numdeg6};
    den={dendeg0,dendeg1,dendeg2,dendeg3,dendeg4,dendeg5,dendeg6};
}

void rhos_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, vector<long double> &rhos, double valGRF){
    typedef long double T;

    auto parsarbuf=parsar.request();
    double *pars=(double *) parsarbuf.ptr;
    T K_1_1=pars[0];
    T K_1_2=pars[1];
    T K_1_3=pars[2];
    T K_1_4=pars[3];
    T K_1_5=pars[4];
    T K_1_6=pars[5];
    T K_2_1=pars[6];
    T K_2_2=pars[7];
    T K_2_3=pars[8];
    T K_2_4=pars[9];
    T K_2_5=pars[10];
    T K_2_6=pars[11];
    T K_3_1=pars[12];
    T K_3_2=pars[13];
    T K_3_3=pars[14];
    T K_3_4=pars[15];
    T K_3_5=pars[16];
    T K_3_6=pars[17];
    T K_4_1=pars[18];
    T K_4_2=pars[19];
    T K_4_3=pars[20];
    T K_4_4=pars[21];
    T K_4_5=pars[22];
    T K_4_6=pars[23];
    T l2=pars[24];
    T l3=pars[25];
    T l4=pars[26];
    T K1=(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4)/(1+l2+l3+l4);
    T K2=(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4)/(1+l2+l3+l4);
    T K3=(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)/(1+l2+l3+l4);
    T K4=(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)/(1+l2+l3+l4);
    T K5=(K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)/(1+l2+l3+l4);
    T K6=(K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)/(1+l2+l3+l4);

    T w12=((K_1_1*K_1_2+K_2_1*K_2_2*l2+K_3_1*K_3_2*l3+K_4_1*K_4_2*l4)*(1+l2+l3+l4))/((K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w13=((K_1_1*K_1_3+K_2_1*K_2_3*l2+K_3_1*K_3_3*l3+K_4_1*K_4_3*l4)*(1+l2+l3+l4))/((K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w14=((K_1_1*K_1_4+K_2_1*K_2_4*l2+K_3_1*K_3_4*l3+K_4_1*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w15=((K_1_1*K_1_5+K_2_1*K_2_5*l2+K_3_1*K_3_5*l3+K_4_1*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w16=((K_1_1*K_1_6+K_2_1*K_2_6*l2+K_3_1*K_3_6*l3+K_4_1*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w123=((K_1_1*K_1_2*K_1_3+K_2_1*K_2_2*K_2_3*l2+K_3_1*K_3_2*K_3_3*l3+K_4_1*K_4_2*K_4_3*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3+K_2_2*K_2_3*l2+K_3_2*K_3_3*l3+K_4_2*K_4_3*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w124=((K_1_1*K_1_2*K_1_4+K_2_1*K_2_2*K_2_4*l2+K_3_1*K_3_2*K_3_4*l3+K_4_1*K_4_2*K_4_4*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4+K_2_2*K_2_4*l2+K_3_2*K_3_4*l3+K_4_2*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w125=((K_1_1*K_1_2*K_1_5+K_2_1*K_2_2*K_2_5*l2+K_3_1*K_3_2*K_3_5*l3+K_4_1*K_4_2*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_5+K_2_2*K_2_5*l2+K_3_2*K_3_5*l3+K_4_2*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w126=((K_1_1*K_1_2*K_1_6+K_2_1*K_2_2*K_2_6*l2+K_3_1*K_3_2*K_3_6*l3+K_4_1*K_4_2*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_6+K_2_2*K_2_6*l2+K_3_2*K_3_6*l3+K_4_2*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w134=((K_1_1*K_1_3*K_1_4+K_2_1*K_2_3*K_2_4*l2+K_3_1*K_3_3*K_3_4*l3+K_4_1*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w135=((K_1_1*K_1_3*K_1_5+K_2_1*K_2_3*K_2_5*l2+K_3_1*K_3_3*K_3_5*l3+K_4_1*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w136=((K_1_1*K_1_3*K_1_6+K_2_1*K_2_3*K_2_6*l2+K_3_1*K_3_3*K_3_6*l3+K_4_1*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w145=((K_1_1*K_1_4*K_1_5+K_2_1*K_2_4*K_2_5*l2+K_3_1*K_3_4*K_3_5*l3+K_4_1*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w146=((K_1_1*K_1_4*K_1_6+K_2_1*K_2_4*K_2_6*l2+K_3_1*K_3_4*K_3_6*l3+K_4_1*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w156=((K_1_1*K_1_5*K_1_6+K_2_1*K_2_5*K_2_6*l2+K_3_1*K_3_5*K_3_6*l3+K_4_1*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1234=((K_1_1*K_1_2*K_1_3*K_1_4+K_2_1*K_2_2*K_2_3*K_2_4*l2+K_3_1*K_3_2*K_3_3*K_3_4*l3+K_4_1*K_4_2*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4+K_2_2*K_2_3*K_2_4*l2+K_3_2*K_3_3*K_3_4*l3+K_4_2*K_4_3*K_4_4*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1235=((K_1_1*K_1_2*K_1_3*K_1_5+K_2_1*K_2_2*K_2_3*K_2_5*l2+K_3_1*K_3_2*K_3_3*K_3_5*l3+K_4_1*K_4_2*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_5+K_2_2*K_2_3*K_2_5*l2+K_3_2*K_3_3*K_3_5*l3+K_4_2*K_4_3*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1236=((K_1_1*K_1_2*K_1_3*K_1_6+K_2_1*K_2_2*K_2_3*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_6+K_2_2*K_2_3*K_2_6*l2+K_3_2*K_3_3*K_3_6*l3+K_4_2*K_4_3*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1245=((K_1_1*K_1_2*K_1_4*K_1_5+K_2_1*K_2_2*K_2_4*K_2_5*l2+K_3_1*K_3_2*K_3_4*K_3_5*l3+K_4_1*K_4_2*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_5+K_2_2*K_2_4*K_2_5*l2+K_3_2*K_3_4*K_3_5*l3+K_4_2*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1246=((K_1_1*K_1_2*K_1_4*K_1_6+K_2_1*K_2_2*K_2_4*K_2_6*l2+K_3_1*K_3_2*K_3_4*K_3_6*l3+K_4_1*K_4_2*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_6+K_2_2*K_2_4*K_2_6*l2+K_3_2*K_3_4*K_3_6*l3+K_4_2*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1256=((K_1_1*K_1_2*K_1_5*K_1_6+K_2_1*K_2_2*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_5*K_1_6+K_2_2*K_2_5*K_2_6*l2+K_3_2*K_3_5*K_3_6*l3+K_4_2*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1345=((K_1_1*K_1_3*K_1_4*K_1_5+K_2_1*K_2_3*K_2_4*K_2_5*l2+K_3_1*K_3_3*K_3_4*K_3_5*l3+K_4_1*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1346=((K_1_1*K_1_3*K_1_4*K_1_6+K_2_1*K_2_3*K_2_4*K_2_6*l2+K_3_1*K_3_3*K_3_4*K_3_6*l3+K_4_1*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1356=((K_1_1*K_1_3*K_1_5*K_1_6+K_2_1*K_2_3*K_2_5*K_2_6*l2+K_3_1*K_3_3*K_3_5*K_3_6*l3+K_4_1*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w1456=((K_1_1*K_1_4*K_1_5*K_1_6+K_2_1*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12345=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_5+K_2_1*K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_5+K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_2*K_4_3*K_4_4*K_4_5*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12346=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_6+K_2_1*K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_6+K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12356=((K_1_1*K_1_2*K_1_3*K_1_5*K_1_6+K_2_1*K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_5*K_1_6+K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w12456=((K_1_1*K_1_2*K_1_4*K_1_5*K_1_6+K_2_1*K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_4*K_1_5*K_1_6+K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w13456=((K_1_1*K_1_3*K_1_4*K_1_5*K_1_6+K_2_1*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w123456=((K_1_1*K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_1*K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_1*K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_1*K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_1+K_2_1*l2+K_3_1*l3+K_4_1*l4));
    T w23=((K_1_2*K_1_3+K_2_2*K_2_3*l2+K_3_2*K_3_3*l3+K_4_2*K_4_3*l4)*(1+l2+l3+l4))/((K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w24=((K_1_2*K_1_4+K_2_2*K_2_4*l2+K_3_2*K_3_4*l3+K_4_2*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w25=((K_1_2*K_1_5+K_2_2*K_2_5*l2+K_3_2*K_3_5*l3+K_4_2*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w26=((K_1_2*K_1_6+K_2_2*K_2_6*l2+K_3_2*K_3_6*l3+K_4_2*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w234=((K_1_2*K_1_3*K_1_4+K_2_2*K_2_3*K_2_4*l2+K_3_2*K_3_3*K_3_4*l3+K_4_2*K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w235=((K_1_2*K_1_3*K_1_5+K_2_2*K_2_3*K_2_5*l2+K_3_2*K_3_3*K_3_5*l3+K_4_2*K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w236=((K_1_2*K_1_3*K_1_6+K_2_2*K_2_3*K_2_6*l2+K_3_2*K_3_3*K_3_6*l3+K_4_2*K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w245=((K_1_2*K_1_4*K_1_5+K_2_2*K_2_4*K_2_5*l2+K_3_2*K_3_4*K_3_5*l3+K_4_2*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w246=((K_1_2*K_1_4*K_1_6+K_2_2*K_2_4*K_2_6*l2+K_3_2*K_3_4*K_3_6*l3+K_4_2*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w256=((K_1_2*K_1_5*K_1_6+K_2_2*K_2_5*K_2_6*l2+K_3_2*K_3_5*K_3_6*l3+K_4_2*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2345=((K_1_2*K_1_3*K_1_4*K_1_5+K_2_2*K_2_3*K_2_4*K_2_5*l2+K_3_2*K_3_3*K_3_4*K_3_5*l3+K_4_2*K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2346=((K_1_2*K_1_3*K_1_4*K_1_6+K_2_2*K_2_3*K_2_4*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2356=((K_1_2*K_1_3*K_1_5*K_1_6+K_2_2*K_2_3*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w2456=((K_1_2*K_1_4*K_1_5*K_1_6+K_2_2*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w23456=((K_1_2*K_1_3*K_1_4*K_1_5*K_1_6+K_2_2*K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_2*K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_2*K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(K_1_2+K_2_2*l2+K_3_2*l3+K_4_2*l4));
    T w34=((K_1_3*K_1_4+K_2_3*K_2_4*l2+K_3_3*K_3_4*l3+K_4_3*K_4_4*l4)*(1+l2+l3+l4))/((K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w35=((K_1_3*K_1_5+K_2_3*K_2_5*l2+K_3_3*K_3_5*l3+K_4_3*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w36=((K_1_3*K_1_6+K_2_3*K_2_6*l2+K_3_3*K_3_6*l3+K_4_3*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w345=((K_1_3*K_1_4*K_1_5+K_2_3*K_2_4*K_2_5*l2+K_3_3*K_3_4*K_3_5*l3+K_4_3*K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w346=((K_1_3*K_1_4*K_1_6+K_2_3*K_2_4*K_2_6*l2+K_3_3*K_3_4*K_3_6*l3+K_4_3*K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w356=((K_1_3*K_1_5*K_1_6+K_2_3*K_2_5*K_2_6*l2+K_3_3*K_3_5*K_3_6*l3+K_4_3*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w3456=((K_1_3*K_1_4*K_1_5*K_1_6+K_2_3*K_2_4*K_2_5*K_2_6*l2+K_3_3*K_3_4*K_3_5*K_3_6*l3+K_4_3*K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(K_1_3+K_2_3*l2+K_3_3*l3+K_4_3*l4));
    T w45=((K_1_4*K_1_5+K_2_4*K_2_5*l2+K_3_4*K_3_5*l3+K_4_4*K_4_5*l4)*(1+l2+l3+l4))/((K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w46=((K_1_4*K_1_6+K_2_4*K_2_6*l2+K_3_4*K_3_6*l3+K_4_4*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w456=((K_1_4*K_1_5*K_1_6+K_2_4*K_2_5*K_2_6*l2+K_3_4*K_3_5*K_3_6*l3+K_4_4*K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(K_1_4+K_2_4*l2+K_3_4*l3+K_4_4*l4));
    T w56=((K_1_5*K_1_6+K_2_5*K_2_6*l2+K_3_5*K_3_6*l3+K_4_5*K_4_6*l4)*(1+l2+l3+l4))/((K_1_6+K_2_6*l2+K_3_6*l3+K_4_6*l4)*(K_1_5+K_2_5*l2+K_3_5*l3+K_4_5*l4));

    T rho_1=(1)*pow(valGRF,0);
    T rho_2=(K1)*pow(valGRF,1);
    T rho_3=(K2)*pow(valGRF,1);
    T rho_4=(K3)*pow(valGRF,1);
    T rho_5=(K4)*pow(valGRF,1);
    T rho_6=(K5)*pow(valGRF,1);
    T rho_7=(K6)*pow(valGRF,1);
    T rho_8=(K1*K2*w12)*pow(valGRF,2);
    T rho_9=(K1*K3*w13)*pow(valGRF,2);
    T rho_10=(K1*K4*w14)*pow(valGRF,2);
    T rho_11=(K1*K5*w15)*pow(valGRF,2);
    T rho_12=(K1*K6*w16)*pow(valGRF,2);
    T rho_13=(K2*K3*w23)*pow(valGRF,2);
    T rho_14=(K2*K4*w24)*pow(valGRF,2);
    T rho_15=(K2*K5*w25)*pow(valGRF,2);
    T rho_16=(K2*K6*w26)*pow(valGRF,2);
    T rho_17=(K3*K4*w34)*pow(valGRF,2);
    T rho_18=(K3*K5*w35)*pow(valGRF,2);
    T rho_19=(K3*K6*w36)*pow(valGRF,2);
    T rho_20=(K4*K5*w45)*pow(valGRF,2);
    T rho_21=(K4*K6*w46)*pow(valGRF,2);
    T rho_22=(K5*K6*w56)*pow(valGRF,2);
    T rho_23=(K1*K2*K3*w123*w23)*pow(valGRF,3);
    T rho_24=(K1*K2*K4*w124*w24)*pow(valGRF,3);
    T rho_25=(K1*K2*K5*w125*w25)*pow(valGRF,3);
    T rho_26=(K1*K2*K6*w126*w26)*pow(valGRF,3);
    T rho_27=(K1*K3*K4*w134*w34)*pow(valGRF,3);
    T rho_28=(K1*K3*K5*w135*w35)*pow(valGRF,3);
    T rho_29=(K1*K3*K6*w136*w36)*pow(valGRF,3);
    T rho_30=(K1*K4*K5*w145*w45)*pow(valGRF,3);
    T rho_31=(K1*K4*K6*w146*w46)*pow(valGRF,3);
    T rho_32=(K1*K5*K6*w156*w56)*pow(valGRF,3);
    T rho_33=(K2*K3*K4*w234*w34)*pow(valGRF,3);
    T rho_34=(K2*K3*K5*w235*w35)*pow(valGRF,3);
    T rho_35=(K2*K3*K6*w236*w36)*pow(valGRF,3);
    T rho_36=(K2*K4*K5*w245*w45)*pow(valGRF,3);
    T rho_37=(K2*K4*K6*w246*w46)*pow(valGRF,3);
    T rho_38=(K2*K5*K6*w256*w56)*pow(valGRF,3);
    T rho_39=(K3*K4*K5*w345*w45)*pow(valGRF,3);
    T rho_40=(K3*K4*K6*w346*w46)*pow(valGRF,3);
    T rho_41=(K3*K5*K6*w356*w56)*pow(valGRF,3);
    T rho_42=(K4*K5*K6*w456*w56)*pow(valGRF,3);
    T rho_43=(K1*K2*K3*K4*w1234*w234*w34)*pow(valGRF,4);
    T rho_44=(K1*K2*K3*K5*w1235*w235*w35)*pow(valGRF,4);
    T rho_45=(K1*K2*K3*K6*w1236*w236*w36)*pow(valGRF,4);
    T rho_46=(K1*K2*K4*K5*w1245*w245*w45)*pow(valGRF,4);
    T rho_47=(K1*K2*K4*K6*w1246*w246*w46)*pow(valGRF,4);
    T rho_48=(K1*K2*K5*K6*w1256*w256*w56)*pow(valGRF,4);
    T rho_49=(K1*K3*K4*K5*w1345*w345*w45)*pow(valGRF,4);
    T rho_50=(K1*K3*K4*K6*w1346*w346*w46)*pow(valGRF,4);
    T rho_51=(K1*K3*K5*K6*w1356*w356*w56)*pow(valGRF,4);
    T rho_52=(K1*K4*K5*K6*w1456*w456*w56)*pow(valGRF,4);
    T rho_53=(K2*K3*K4*K5*w2345*w345*w45)*pow(valGRF,4);
    T rho_54=(K2*K3*K4*K6*w2346*w346*w46)*pow(valGRF,4);
    T rho_55=(K2*K3*K5*K6*w2356*w356*w56)*pow(valGRF,4);
    T rho_56=(K2*K4*K5*K6*w2456*w456*w56)*pow(valGRF,4);
    T rho_57=(K3*K4*K5*K6*w3456*w456*w56)*pow(valGRF,4);
    T rho_58=(K1*K2*K3*K4*K5*w12345*w2345*w345*w45)*pow(valGRF,5);
    T rho_59=(K1*K2*K3*K4*K6*w12346*w2346*w346*w46)*pow(valGRF,5);
    T rho_60=(K1*K2*K3*K5*K6*w12356*w2356*w356*w56)*pow(valGRF,5);
    T rho_61=(K1*K2*K4*K5*K6*w12456*w2456*w456*w56)*pow(valGRF,5);
    T rho_62=(K1*K3*K4*K5*K6*w13456*w3456*w456*w56)*pow(valGRF,5);
    T rho_63=(K2*K3*K4*K5*K6*w23456*w3456*w456*w56)*pow(valGRF,5);
    T rho_64=(K1*K2*K3*K4*K5*K6*w123456*w23456*w3456*w456*w56)*pow(valGRF,6);
    rhos={rho_1,rho_2,rho_3,rho_4,rho_5,rho_6,rho_7,rho_8,rho_9,rho_10,rho_11,rho_12,rho_13,rho_14,rho_15,rho_16,rho_17,rho_18,rho_19,rho_20,rho_21,rho_22,rho_23,rho_24,rho_25,rho_26,rho_27,rho_28,rho_29,rho_30,rho_31,rho_32,rho_33,rho_34,rho_35,rho_36,rho_37,rho_38,rho_39,rho_40,rho_41,rho_42,rho_43,rho_44,rho_45,rho_46,rho_47,rho_48,rho_49,rho_50,rho_51,rho_52,rho_53,rho_54,rho_55,rho_56,rho_57,rho_58,rho_59,rho_60,rho_61,rho_62,rho_63,rho_64};
}

double GRFatxonly(vector<long double>&num, vector<long double>&den, double varGRFval){    typedef long double T;

    
    T numsum=0;
    T densum=0;
    std::vector<T>::size_type i;
    for (i=0;i<num.size();i++){
        numsum+=num[i]*pow(varGRFval,(int)i);
    }
    for (i=0;i<den.size();i++){
        densum+=den[i]*pow(varGRFval,(int)i);
    }
    double result=numsum/densum;
    return result;
    
}


double interface_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, double varGRFval ) {

    typedef long double T;

    vector<T> num;
    vector<T> den;
    double result;
    
    GRF_CG_c4_N6_samesitesFalse_x(parsar,num,den);

    result=GRFatxonly(num,den,varGRFval);
    return result;
}

py::array_t<double> interfaceps_s_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, bool verbose=false ) {
    typedef long double T;

    vector<T> num;
    vector<T> den;
    vector<double>result;
    GRF_CG_c4_N6_samesitesFalse_x(parsar,num,den);
    result=compute_pos_stp(num,den,"simple", verbose);

    py::array_t<double> resultpy = py::array_t<double>(3);
    py::buffer_info bufresultpy = resultpy.request();
    double *ptrresultpy=(double *) bufresultpy.ptr;
    ptrresultpy[0]=result[0];
    ptrresultpy[1]=result[1];
    ptrresultpy[2]=result[2];

    return  resultpy;
    }

py::array_t<double> interfaceps_a_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, bool verbose=false ) {
    typedef long double T;

    vector<T> num;
    vector<T> den;
    vector<double>result;
    GRF_CG_c4_N6_samesitesFalse_x(parsar,num,den);
    result=compute_pos_stp(num,den,"aberth", verbose);

    py::array_t<double> resultpy = py::array_t<double>(3);
    py::buffer_info bufresultpy = resultpy.request();
    double *ptrresultpy=(double *) bufresultpy.ptr;
    ptrresultpy[0]=result[0];
    ptrresultpy[1]=result[1];
    ptrresultpy[2]=result[2];

    return  resultpy;
    }

py::array_t<double> interfacemonotonic_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar ) {
    typedef long double T;

    vector<T> num;
    vector<T> den;
    vector<double> result;
    GRF_CG_c4_N6_samesitesFalse_x(parsar,num,den);

    result=compute_monotonic(num,den); //return {-1} if derivative is 0, {-2} if no roots for the derivative of the GRF, -3 for each root out of the 10^-10,10^10 range, and the roots otherwise
    int n=result.size();
    py::array_t<double> resultpy = py::array_t<double>(n);
    py::buffer_info bufresultpy = resultpy.request();
    double *ptrresultpy=(double *) bufresultpy.ptr;
    for (int i=0;i<n;i++){
        //py::print("Result is",result[i]);
        if (result[i]<-0.5){
        ptrresultpy[i]=result[i];
        }else{
        if ((result[i]<pow(10.0,10))&&(result[i]>pow(10.0,-10))){
            ptrresultpy[i]=result[i];
        }else{
            ptrresultpy[i]=-3;
        }
        }
    }
    return resultpy;
    
    }

py::array_t<double> interface_rhos_GRF_CG_c4_N6_samesitesFalse_x(py::array_t<double> parsar, double varGRFval ) {

    typedef long double T;

    vector<T> rhos;
    rhos_GRF_CG_c4_N6_samesitesFalse_x(parsar,rhos,varGRFval);

    int n=rhos.size();
    py::array_t<double> resultpy = py::array_t<double>(n);
    py::buffer_info bufresultpy = resultpy.request();
    double *ptrresultpy=(double *) bufresultpy.ptr;
    for (int i=0;i<n;i++){
    ptrresultpy[i]=rhos[i];
    }
    return resultpy;
    
    }

PYBIND11_MODULE(CG_c4_N6_samesitesFalse, m) {
    m.def("interfaceps_s_GRF_CG_c4_N6_samesitesFalse_x", &interfaceps_s_GRF_CG_c4_N6_samesitesFalse_x, "A function which returns pos stp, roots with eigenvalues of companion matrix.",
   py::arg("parsar"),  py::arg("verbose")=false);
    m.def("interfaceps_a_GRF_CG_c4_N6_samesitesFalse_x", &interfaceps_a_GRF_CG_c4_N6_samesitesFalse_x, "A function which returns pos stp, roots with aberth method.",
   py::arg("parsar"),  py::arg("verbose")=false);
    m.def("interfacemonotonic_GRF_CG_c4_N6_samesitesFalse_x", &interfacemonotonic_GRF_CG_c4_N6_samesitesFalse_x, "A function which assessess whether GRF has a local maximum.");
    m.def("interface_GRF_CG_c4_N6_samesitesFalse_x", &interface_GRF_CG_c4_N6_samesitesFalse_x, " A function that returns GRF at a given input value.");
    m.def("interface_rhos_GRF_CG_c4_N6_samesitesFalse_x", &interface_rhos_GRF_CG_c4_N6_samesitesFalse_x, " A function that returns the rhos at a given input value.");
}
